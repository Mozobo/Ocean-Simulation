// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CalculateInitialSpectrumTextures
#pragma kernel CalculateConjugatedInitialSpectrumTextures

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

static const float PI = 3.14159265;

uint _NbCascades;
uint _TextureSize;

Texture2D<float2> _RandomNoiseTexture;
RWTexture2DArray<float4> _InitialSpectrumTextures;
RWTexture2DArray<float4> _WavesDataTextures;
StructuredBuffer<float> _WaveLengths;
StructuredBuffer<float> _Cutoffs;

float _WindSpeed;
float _WindDirectionX;
float _WindDirectionY;
float _Gravity;
float _Fetch;
float _Depth;
float _Fade;
float _Swell;


// Returns wave's angular frequency given its wave number
// For more info: https://en.wikipedia.org/wiki/Dispersion_(water_waves)
float AngularFrequency(float k) {
    return sqrt(_Gravity * k); // Angular frequency deep water
}

// TMA modifier for a given angular frequency
float TMACorrection(float angularFrequency) {
	float angularFrequencyH = angularFrequency * sqrt(_Depth / _Gravity);
	if (angularFrequencyH <= 1.0f) return 0.5f * angularFrequencyH * angularFrequencyH;
	if (angularFrequencyH < 2.0f) return 1.0f - 0.5f * (2.0f - angularFrequencyH) * (2.0f - angularFrequencyH);
	return 1.0f;
}

// Returns JONSWAP spectrum value for a given angular frequency
// https://wikiwaves.org/Ocean-Wave_Spectra
float JONSWAP(float angularFrequency, float peakAngularFrequency) {
    float alpha = 0.076f * pow(abs(_WindSpeed * _WindSpeed/(_Fetch * _Gravity)), 0.22f);
    float gamma = 3.3f;
    float sigma = angularFrequency <= peakAngularFrequency ? 0.07f : 0.09f;

    float frequencyMinusPeakFrequency = angularFrequency - peakAngularFrequency;
    float r = exp(-(frequencyMinusPeakFrequency * frequencyMinusPeakFrequency)/(2 * sigma * sigma * peakAngularFrequency * peakAngularFrequency));

    return alpha * _Gravity * _Gravity / pow(angularFrequency, 5) * exp(-1.25 * pow(peakAngularFrequency / angularFrequency, 4)) * pow(abs(gamma), r);
}

// Returns spread
// https://www.sciencedirect.com/topics/engineering/directional-spreading (fig. 5.63 and 5.64)
float SpreadPower(float angularFrequency, float peakAngularFrequency) {
    if(angularFrequency < 1.05 * peakAngularFrequency) return 6.97 * pow(abs(angularFrequency/peakAngularFrequency), 4.06);

    float peakSpeed = _Gravity/peakAngularFrequency;
    float mu = -2.33 - 1.45 * (_WindSpeed/peakSpeed - 1.17);
    return 9.77 * pow(abs(angularFrequency/peakAngularFrequency), mu);
}

// Normalization factor for directional spreading
float NormalizationFactor(float s) {
	float s2 = s * s;
	float s3 = s2 * s;
	if (s <= 0.4f) return 0.09f * s3 + (pow(log(2), 2)/PI - PI/12.0f) * s2 + log(2) / PI * s + 1/(2 * PI);
    return sqrt(s) / (2.0f * sqrt(PI)) + 1 / (16.0f * sqrt(PI * s));
}

// Returns directional spread from given frequency and angle
// https://www.sciencedirect.com/topics/engineering/directional-spreading (fig. 5.60)
float DirectionalSpread(float angularFrequency, float peakAngularFrequency, float theta) {
    float s = SpreadPower(angularFrequency, peakAngularFrequency) + 16 * tanh(angularFrequency / peakAngularFrequency) * _Swell * _Swell;
    float2 normalizedWindDirection = normalize(float2(_WindDirectionX, _WindDirectionY));
    float windTheta = atan2(normalizedWindDirection.y, normalizedWindDirection.x);

    return NormalizationFactor(s) * pow(abs(cos(0.5f * (theta - windTheta))), 2.0f * s);
}

// Derivative of the angular frequency with respect to wave number
float FrequencyDerivative(float k, float angularFrequency) {
    float th = tanh(min(k * _Depth, 20));
    float ch = cosh(k * _Depth);
    return _Gravity * (_Depth * k / ch / ch + th) / (angularFrequency * 2);
}

// Attenuation factor for short waves
// https://www.researchgate.net/publication/264839743_Simulating_Ocean_Water (formula 41)
float ShortWavesFade(float k, float fade) {
	return exp(-fade * fade * k * k);
}

[numthreads(8,8,1)]
void CalculateInitialSpectrumTextures(uint3 id : SV_DispatchThreadID) {
    uint halfSize = _TextureSize/2;
    int nx = id.x - halfSize;
    int nz = id.y - halfSize;
    float gaussianRandomNumber1 = _RandomNoiseTexture[id.xy].x;
    float gaussianRandomNumber2 = _RandomNoiseTexture[id.xy].y;

    for (uint i = 0; i < _NbCascades; ++i) {
        // K is the wavenumber
        float k = 2.0f * PI/_WaveLengths[i];
        float2 kVector = float2(nx, nz) * k;
        float kMagnitude = length(kVector);

        if(kMagnitude >= _Cutoffs[i * 2] && kMagnitude <= _Cutoffs[i * 2 + 1]){
            float kAngle = atan2(kVector.y, kVector.x);
            float angularFrequency = AngularFrequency(kMagnitude);
            // The peak frequency is calculated here because we also need it for the directional spread
            float peakAngularFrequency = 22 * pow(abs(_Gravity * _Gravity/(_WindSpeed * _Fetch)), 0.3333f);

            _InitialSpectrumTextures[uint3(id.xy, i)] = float4(float2(gaussianRandomNumber1, gaussianRandomNumber2) / 2.0f * sqrt(2.0f * TMACorrection(angularFrequency) * JONSWAP(angularFrequency, peakAngularFrequency) * DirectionalSpread(angularFrequency, peakAngularFrequency, kAngle) * ShortWavesFade(kMagnitude, _Fade) * FrequencyDerivative(kMagnitude, angularFrequency) / kMagnitude * k * k), 0.0f, 0.0f);
            // WavesData textures contain information of the wave on each pixel
            // float4(direction on the x axis, 1/k for the FFT, direction on the z axis, wave frequency);
            _WavesDataTextures[uint3(id.xy, i)] = float4(kVector.x, 1/kMagnitude, kVector.y, angularFrequency);
        } else {
            _InitialSpectrumTextures[uint3(id.xy, i)] = 0;
            _WavesDataTextures[uint3(id.xy, i)] = float4(kVector.x, 1, kVector.y, 0);
        }
    }
}

// We store on each pixel the values of the initial amplitude of that pixel and the initial amplitude of the complex conjugated pixel
// This will help us on the time dependent amplitudes calculations
// https://www.researchgate.net/publication/264839743_Simulating_Ocean_Water (formula 43)
// https://www.cg.tuwien.ac.at/research/publications/2018/GAMPER-2018-OSG/GAMPER-2018-OSG-thesis.pdf (Hermitian Wave Spectrum and Complex Conjugate Indices sections)
[numthreads(8,8,1)]
void CalculateConjugatedInitialSpectrumTextures(uint3 id : SV_DispatchThreadID) {
    for (uint i = 0; i < _NbCascades; ++i) {
        float2 H0K = _InitialSpectrumTextures[uint3(id.xy, i)].xy;
        uint2 complexConjugateIndex = uint2((_TextureSize - id.x) % _TextureSize, (_TextureSize - id.y) % _TextureSize);
        float2 H0MinusK = _InitialSpectrumTextures[uint3(complexConjugateIndex, i)].xy;
        _InitialSpectrumTextures[uint3(id.xy, i)] = float4(H0K.x, H0K.y, H0MinusK.x, -H0MinusK.y);
    }
}